<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://uv-xiao.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://uv-xiao.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-09T08:23:14+00:00</updated><id>https://uv-xiao.github.io/feed.xml</id><title type="html">uv-xiao</title><subtitle>struggling to be a good person. </subtitle><entry><title type="html">Look into eggcc</title><link href="https://uv-xiao.github.io/blog/2024/eggcc/" rel="alternate" type="text/html" title="Look into eggcc"/><published>2024-12-01T00:00:00+00:00</published><updated>2024-12-01T00:00:00+00:00</updated><id>https://uv-xiao.github.io/blog/2024/eggcc</id><content type="html" xml:base="https://uv-xiao.github.io/blog/2024/eggcc/"><![CDATA[<h1 id="eggcc">Eggcc</h1> <blockquote class="block-tip"> <p>I’m trying to use e-graph/eqsat/extract/… to do some compiler-involved stuff. The <a href="https://github.com/egraphs-good/eggcc">eggcc</a> is a good starting point. And here is my note of it.</p> </blockquote> <h2 id="about">About</h2> <p><a href="https://github.com/egraphs-good/eggcc">eggcc</a> compiles <a href="https://github.com/uwplse/bril">bril</a> to LLVMIR/cranelift. It is mainly hosted by UW PLSE lab (I guess, since the active contributors, including Oliver Flatt, Anjali Pal, and Yihong Zhang, are from the lab). The project is still under heavy development, and lacks open documentation. I found it very inspiring as a rewrite-based, more specifically <a href="https://github.com/egraphs-good/egglog">egglog</a>-based compiler. So here is my note of it.</p> <p>Related work:</p> <ul> <li><a href="https://github.com/phate/jlm">jlm</a>: <code class="language-plaintext highlighter-rouge">RVSDG</code>-based compiler: <code class="language-plaintext highlighter-rouge">llvmir -&gt; RVSDG -&gt; llvmir/mlir/circt</code>;</li> <li><a href="https://github.com/jameysharp/optir/">optir</a>: proof-of-concept <code class="language-plaintext highlighter-rouge">RVSDG</code>-based compiler, use <a href="https://github.com/egraphs-good/egg">egg</a> for optimization;</li> </ul> <h2 id="have-the-first-try">Have the first try</h2> <blockquote class="block-tip"> <p>words to my colleague: please use my fork of eggcc, which is <a href="https://github.com/uv-xiao/eggcc">uv-xiao/eggcc</a>.</p> </blockquote> <p>Follow <a href="https://github.com/egraphs-good/eggcc">eggcc’s README</a>’s instruction for installation (which should be fine :smiley:), then run:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo run -- --debug-dir ./temp --run-mode optimize  &lt;bril, e.g. ./tests/passing/small/loop_if.bril&gt; 
</code></pre></div></div> <p>Then, <a href="https://github.com/egraphs-good/eggcc">eggcc</a> will generate the <code class="language-plaintext highlighter-rouge">temp</code> directory, holding some visualization files for <code class="language-plaintext highlighter-rouge">rvsdg</code>, <code class="language-plaintext highlighter-rouge">cfg</code>, and <code class="language-plaintext highlighter-rouge">dag</code>. And the optimized <code class="language-plaintext highlighter-rouge">bril</code> code will be printed to stdout.</p> <p><del>Also, you can run (after some npm setup):</del></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash infra/localnightly.sh &lt;bril file or directory&gt;
cd nightly/output &amp;&amp; python3 -m http.server
</code></pre></div></div> <p><del>to get a local server for report and visualization of <code class="language-plaintext highlighter-rouge">eggcc</code>’s runs.</del></p> <blockquote class="block-tip"> <p>seems not useful for us</p> </blockquote> <h2 id="how-to-develop">How to develop</h2> <h3 id="setup-local-egglog-demo">Setup local egglog demo</h3> <p>After clone eggcc (maybe from <a href="https://github.com/uv-xiao/eggcc">my fork</a>), you’d better also clone the <a href="https://github.com/egraphs-good/egglog">egglog</a> repo and checkout to the commit used by eggcc.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:egraphs-good/egglog.git
<span class="nb">cd </span>egglog
git checkout 246b195 <span class="c"># make sure the commit is the same as eggcc!</span>
</code></pre></div></div> <p>Then, you can start the egglog web-demo locally (you may need some proxy setting for fast installation):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo <span class="nb">install </span>cargo-watch wasm-pack
make serve <span class="c"># it can be slow for the first time</span>
<span class="c"># if make serve failed, tab Ctrl-c to stop, and run `make serve` again</span>
</code></pre></div></div> <p>Then you can open the <code class="language-plaintext highlighter-rouge">http://localhost:8080/</code> in your browser.</p> <p>You can also install <code class="language-plaintext highlighter-rouge">egglog</code> locally:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># under egglog directory</span>
cargo <span class="nb">install</span> <span class="nt">--path</span> <span class="nb">.</span> <span class="nt">--root</span> &lt;path-to-install, like <span class="nv">$HOME</span>/.local&gt;
</code></pre></div></div> <p>After, you can run <code class="language-plaintext highlighter-rouge">egglog --to-dot &lt;path-to-egglog-program&gt;</code> to get the dot file.</p> <h3 id="install-vscode-extension">Install vscode extension</h3> <p>named <code class="language-plaintext highlighter-rouge">egglog-language</code></p> <h3 id="add-new-rulesets">Add new rulesets</h3> <p>Take a look at the <code class="language-plaintext highlighter-rouge">peepholes</code> ruleset in <code class="language-plaintext highlighter-rouge">dag_in_context/src/optimizations/peepholes.rs</code> and <code class="language-plaintext highlighter-rouge">dag_in_context/src/optimizations/peepholes.egg</code> for example;</p> <p>In the <code class="language-plaintext highlighter-rouge">arith_rewrites</code> test function, it first create <code class="language-plaintext highlighter-rouge">expr: Rc&lt;Expr&gt;</code>, representing <code class="language-plaintext highlighter-rouge">(0 + x + 0 + 1 + 2 + y * 1)</code>. The expected output <code class="language-plaintext highlighter-rouge">expected: Rc&lt;Expr&gt;</code> is <code class="language-plaintext highlighter-rouge">(x + 3 + y)</code>. And the test calls <code class="language-plaintext highlighter-rouge">egglog_test()</code>, which includes:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; eggcc prologue, thousands of lines
(let expr_ {expr}) ; build expr_ from expr
; run eggcc schedule
(check (= expr_ {expected})) ; check if the expected output is derived
</code></pre></div></div> <p>Then, you can run the test:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cargo test -p dag_in_context -- optimizations::peepholes::arith_rewrites --exact --show-output
</code></pre></div></div> <p>where <code class="language-plaintext highlighter-rouge">optimizations::peepholes::arith_rewrites</code> is the path to the test function. <code class="language-plaintext highlighter-rouge">--exact</code> is used to match the exact function name, and <code class="language-plaintext highlighter-rouge">--show-output</code> is used to show the output of the test.</p> <p>The stdout will contain:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Writing egglog test to &lt;path-to-eggcc&gt;/dag_in_context/temp/egglog_test.egg
</code></pre></div></div> <p>which contains thousands of lines.</p> <p>In <code class="language-plaintext highlighter-rouge">dag_in_context/src/lib.rs</code>, you can check the <code class="language-plaintext highlighter-rouge">egglog_test_internal</code> to see how the egglog program is generated:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  let program = format!(
    ";Here is the &lt;PROLOGUE&gt;\n{}\n\n;Here is the &lt;BUILD&gt;\n{build}\n\n;Here is the &lt;SCHEDULE&gt;\n{}\n\n;Here is the &lt;CHECK&gt;\n{check}\n",
    reduce_redundant_nlines(prologue()),
    reduce_redundant_nlines(
      parallel_schedule()
        .iter()
        .map(|pass| pass.egglog_schedule().to_string())
        .collect::&lt;Vec&lt;String&gt;&gt;()
        .join("\n")
    ),
  );
</code></pre></div></div> <p>And you can search for <code class="language-plaintext highlighter-rouge">;Here is the &lt;BUILD&gt;</code> to find the original <code class="language-plaintext highlighter-rouge">expr</code>, and <code class="language-plaintext highlighter-rouge">;Here is the &lt;CHECK&gt;</code> to find the expected output.</p> <blockquote class="block-tip"> <p>The <code class="language-plaintext highlighter-rouge">interpret</code> feature of eggcc is also useful for debugging. Currently, I’ve not used it. This is a TODO.</p> </blockquote> <p>Now, you can paste the egglog program to the local egglog demo, and see if the expected output is derived.</p> <p>You can use the <code class="language-plaintext highlighter-rouge">Slidemode</code> to inspect the egglog execution step by step.</p> <h4 id="make-it-more-accessible">Make it more accessible</h4> <p>Currently, the egglog program is not accessible. IT’S TOO LONG! And the <code class="language-plaintext highlighter-rouge">schedule</code>s do too much things.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>prologue lines: 4703
schedule lines: 497
</code></pre></div></div> <p>And the produced graphviz file contains too many nodes and edges (2362 lines).</p> <p>So, we may make them simpler.</p> <ol> <li>apply <code class="language-plaintext highlighter-rouge">debug-deletes</code> ruleset for simplified visualization; <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  (run-schedule debug-deletes) ; after &lt;CHECK&gt;
</code></pre></div> </div> <p>for the <code class="language-plaintext highlighter-rouge">peepholes::arith_rewrites</code> test, the dot file lines reduce to 1743 lines, much more readable.</p> </li> <li>…</li> </ol> <blockquote class="block-tip"> <p>TODO: simplify prologue and schedule.</p> </blockquote> <h2 id="how-it-works">How it works</h2> <p>Main loop: in <code class="language-plaintext highlighter-rouge">src/utils.rs</code>, <code class="language-plaintext highlighter-rouge">Run::optimize_bril</code>:</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">optimize_bril</span><span class="p">(</span><span class="n">program</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">Program</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">EggccConfig</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Program</span><span class="p">,</span> <span class="n">EggCCError</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">let</span> <span class="n">rvsdg</span> <span class="o">=</span> <span class="nn">Optimizer</span><span class="p">::</span><span class="nf">program_to_rvsdg</span><span class="p">(</span><span class="n">program</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
  <span class="k">let</span> <span class="p">(</span><span class="n">dag</span><span class="p">,</span> <span class="k">mut</span> <span class="n">cache</span><span class="p">)</span> <span class="o">=</span> <span class="n">rvsdg</span><span class="nf">.to_dag_encoding</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
  <span class="k">let</span> <span class="n">optimized</span> <span class="o">=</span>
      <span class="nn">dag_in_context</span><span class="p">::</span><span class="nf">optimize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dag</span><span class="p">,</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">cache</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span><span class="nf">.map_err</span><span class="p">(</span><span class="nn">EggCCError</span><span class="p">::</span><span class="n">EggLog</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
  <span class="k">let</span> <span class="n">rvsdg2</span> <span class="o">=</span> <span class="nf">dag_to_rvsdg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">optimized</span><span class="p">);</span>
  <span class="k">let</span> <span class="n">cfg</span> <span class="o">=</span> <span class="n">rvsdg2</span><span class="nf">.to_cfg</span><span class="p">();</span>
  <span class="k">let</span> <span class="n">bril</span> <span class="o">=</span> <span class="n">cfg</span><span class="nf">.to_bril</span><span class="p">();</span>
  <span class="k">let</span> <span class="n">bril</span> <span class="o">=</span> <span class="nf">canonicalize_bril</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bril</span><span class="p">);</span>
  <span class="nf">Ok</span><span class="p">(</span><span class="n">bril</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="rvsdg">RVSDG</h3> <p>In <code class="language-plaintext highlighter-rouge">src/rvsdg/mod.rs</code>:</p> <table> <thead> <tr> <th>struct/enum</th> <th>description</th> <th>members</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">BasicExpr</code></td> <td>prim op, function call, const, effect (mem, print)</td> <td>operands: <code class="language-plaintext highlighter-rouge">Vec&lt;Op&gt;</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Operand</code></td> <td>region arg, region output</td> <td>i-th arg/output, region <code class="language-plaintext highlighter-rouge">Id</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">RvsdgBody</code></td> <td>basic, if (0/1), gamma (switch), theta (do-while)</td> <td>holding <code class="language-plaintext highlighter-rouge">Operand</code>s</td> </tr> </tbody> </table> <p><code class="language-plaintext highlighter-rouge">rvsdg</code> format is imagelike, exprs and bodies are nodes, operands are edges.</p> <p>For example, <a href="https://github.com/egraphs-good/eggcc/blob/main/tests/passing/small/min.bril">min.bril</a>:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ARGS: 20 30
@main(x: int, y: int) {
  cmp: bool = lt x y;
  res: int = id y;
  br cmp .then .else;
  .then:
    res: int = id x;
  .else:
  .done:
    print res;
}
</code></pre></div></div> <p>corresponds to two rvsdgs:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/in_posts/2024-12-01-eggcc-rvsdg-480.webp 480w,/assets/img/in_posts/2024-12-01-eggcc-rvsdg-800.webp 800w,/assets/img/in_posts/2024-12-01-eggcc-rvsdg-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/in_posts/2024-12-01-eggcc-rvsdg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/in_posts/2024-12-01-eggcc-rvsdg-optmized-480.webp 480w,/assets/img/in_posts/2024-12-01-eggcc-rvsdg-optmized-800.webp 800w,/assets/img/in_posts/2024-12-01-eggcc-rvsdg-optmized-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/in_posts/2024-12-01-eggcc-rvsdg-optmized.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> unoptimized/optimized rvsdg </div> <h3 id="dag">DAG</h3> <p><code class="language-plaintext highlighter-rouge">rvsdg-&gt;dag</code>: in <code class="language-plaintext highlighter-rouge">src/rvsdg/to_dag.rs</code>, <code class="language-plaintext highlighter-rouge">RvsdgProgram::to_dag_encoding</code></p> <p><code class="language-plaintext highlighter-rouge">dag</code>: in <code class="language-plaintext highlighter-rouge">dag_in_context/schema.rs</code></p> <p>The <code class="language-plaintext highlighter-rouge">dag</code> format is a graph of expressions with contexts:</p> <table> <thead> <tr> <th>struct/enum</th> <th>description</th> <th>members</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">TreeProgram</code></td> <td>program</td> <td>entry, functions</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Expr</code></td> <td>expression, including func, loop, expr, …</td> <td><code class="language-plaintext highlighter-rouge">RcExpr</code> as operands and results</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">RcExpr</code></td> <td>expression as data</td> <td><code class="language-plaintext highlighter-rouge">Rc&lt;Expr&gt;</code></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Assumption</code></td> <td>context, in-loop, in-if, …</td> <td>directly bound to consts, and args</td> </tr> </tbody> </table> <blockquote> <p>For more details about <code class="language-plaintext highlighter-rouge">Assumption</code>, see <code class="language-plaintext highlighter-rouge">ASSUME</code> nodes in “Automating Constraint-Aware Datapath Optimization using E-Graphs. DAC 2023, doi: 10.1109/DAC56929.2023.0247797”.</p> </blockquote> <p><a href="https://github.com/egraphs-good/eggcc/blob/main/tests/passing/small/min.bril">min.bril</a>’s unoptimized rvsdg is converted to:</p> <div class="row mt-1"> <div class="col-sm mt-1 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/in_posts/2024-12-01-eggcc-dag-480.webp 480w,/assets/img/in_posts/2024-12-01-eggcc-dag-800.webp 800w,/assets/img/in_posts/2024-12-01-eggcc-dag-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/in_posts/2024-12-01-eggcc-dag.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> unoptimized dag </div> <h3 id="egglog">Egglog</h3> <p><code class="language-plaintext highlighter-rouge">dag-&gt;egglog</code>: in <code class="language-plaintext highlighter-rouge">dag_in_context/to_egglog.rs</code>, <code class="language-plaintext highlighter-rouge">TreeToEgglog</code>:</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span><span class="p">(</span><span class="k">crate</span><span class="p">)</span> <span class="k">struct</span> <span class="n">TreeToEgglog</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="n">termdag</span><span class="p">:</span> <span class="n">TermDag</span><span class="p">,</span>
    <span class="c1">// Cache for shared subexpressions</span>
    <span class="n">converted_cache</span><span class="p">:</span> <span class="n">IndexMap</span><span class="o">&lt;*</span><span class="k">const</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Term</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <p>, where <code class="language-plaintext highlighter-rouge">TermDag</code> is hashconsing arena for <code class="language-plaintext highlighter-rouge">Term</code>s provided by <code class="language-plaintext highlighter-rouge">egglog</code>.</p> <p><code class="language-plaintext highlighter-rouge">dag-&gt;egglog</code> is very straightforward: for an <code class="language-plaintext highlighter-rouge">Expr</code>, such as an <code class="language-plaintext highlighter-rouge">Expr::Bop(op, lhs, rhs)</code>, it is converted to something like <code class="language-plaintext highlighter-rouge">(Bop (op) (lhs) (rhs))</code> in egglog.</p> <p>The generated egglog is very verbose. The <a href="https://github.com/egraphs-good/eggcc/blob/main/tests/passing/small/min.bril">min.bril</a>’s egglog is 4000+ lines. Here I introduce the contents briefly:</p> <blockquote> <p>THESE DEFINITIONS ARE ALL THE SAME FOR EVERY BRIL PROGRAM.</p> </blockquote> <ul> <li><code class="language-plaintext highlighter-rouge">Term</code>: <code class="language-plaintext highlighter-rouge">Expr | ListExpr</code></li> <li>data type: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(datatype BaseType
  (IntT) (BoolT) (FloatT)
  ; a pointer to a memory region with a particular type
  (PointerT BaseType)
  (StateT))
(datatype Type
  ; a primitive type
  (Base BaseType)
  ; a typed tuple. Use an empty tuple as a unit type.
  ; state edge also has unit type
  ; function TNil and TCons produces TypeList
  (TupleT TypeList)
)
</code></pre></div> </div> </li> <li><code class="language-plaintext highlighter-rouge">Assumption: InFunc | InLoop | InIf | InSwitch</code></li> <li>Leaf nodes: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(function Arg (Type Assumption) Expr)
(function Const (Constant Type Assumption) Expr)
(function Empty (Type Assumption) Expr)
</code></pre></div> </div> </li> <li>Operators: <code class="language-plaintext highlighter-rouge">TernaryOp</code>, <code class="language-plaintext highlighter-rouge">BinaryOp</code>, <code class="language-plaintext highlighter-rouge">UnaryOp</code> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(function Top   (TernaryOp Expr Expr Expr) Expr)
(function Bop   (BinaryOp Expr Expr) Expr)
(function Uop   (UnaryOp Expr) Expr)
; some other about tuple, alloc, call
</code></pre></div> </div> </li> <li>Control flow: if, switch, loop <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; Switch on a list of lazily-evaluated branches.
; pred must be an integer
;                 pred  inputs   branches     chosen
(function Switch (Expr  Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred inputs   then else
(function If (Expr Expr     Expr Expr) Expr)
; A do-while loop.
; Evaluates the input, then evaluates the body.
; input must have the same type as (output1, output2, ..., outputi)
; input must be a tuple, pred must be a boolean
; pred-and-body must be a flat tuple (pred, out1, out2, ..., outi)
; input must be the same type as (out1, out2, ..., outi)
;                  input   pred-and-body
(function DoWhile (Expr    Expr)                   Expr)
</code></pre></div> </div> </li> </ul> <p>Generated egglog also have <code class="language-plaintext highlighter-rouge">Term</code>s.</p> <blockquote class="block-tip"> <p>why need <code class="language-plaintext highlighter-rouge">Term</code>? It looks like <code class="language-plaintext highlighter-rouge">Expr</code>… Its usage need to be clarified.</p> </blockquote> <p>It defines and infers the sort <code class="language-plaintext highlighter-rouge">TermAndCost</code> and the function <code class="language-plaintext highlighter-rouge">ExtractedExpr</code> for cost-model-guided extraction? So <code class="language-plaintext highlighter-rouge">Term</code> is extracted <code class="language-plaintext highlighter-rouge">Expr</code>? See the <a href="#select-optimization">select optimization</a> example, it seems so.</p> <p>The <code class="language-plaintext highlighter-rouge">term-subst</code> ruleset instantiates the term as an Expr in the provided context.</p> <h3 id="checking-and-optimization">Checking and Optimization</h3> <blockquote class="block-warning"> <p>not finished yet; this relates to compiler optimization, maybe out of our concern.</p> </blockquote> <h5 id="legality-checking">Legality Checking</h5> <p>Implemented in rulesets:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset is-resolved)
(ruleset always-run) 
</code></pre></div></div> <h5 id="type-analysis">Type Analysis</h5> <p>Implemented in rulesets:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset type-analysis)
(ruleset type-helpers) 
</code></pre></div></div> <p>It interfers relations:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;; Keep track of type expectations for error messages
(relation ExpectType (Expr Type String))
</code></pre></div></div> <p>and type-checking rules is like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rule (
        (ExpectType e expected msg)
        (HasType e actual)
        (!= expected actual) ;; not okay unless we saturate type helpers.
      )
      ((extract "Expecting expression")
       (extract e)
       (extract "to have type")
       (extract expected)
       (extract "but got type")
       (extract actual)
       (extract "with message")
       (extract msg)
       (panic "type mismatch- check RUST_LOG=info for expressions that mismatched"))
      :ruleset error-checking)
</code></pre></div></div> <p>and also have rules to infer and check <code class="language-plaintext highlighter-rouge">HasArgType</code> and <code class="language-plaintext highlighter-rouge">HasType</code> relations for operators and control flow nodes.</p> <h5 id="add-context">Add Context</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset context)
</code></pre></div></div> <h5 id="term-substitution">Term Substitution</h5> <blockquote class="block-tip"> <p>when is this used?</p> </blockquote> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset term-subst)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; Instantiate the term as an Expr in the provided context
; where references to (Arg) in the term are replaced by Expr
(function TermSubst (Assumption Expr Term) Expr :unextractable)
</code></pre></div></div> <p>For the example of an constant term:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; replace the context
(rule ((= lhs (TermSubst ctx e (TermArg))))
      ((union lhs (AddContext ctx e)))
      :ruleset term-subst)
</code></pre></div></div> <h5 id="substitution">Substitution</h5> <p>Implemented in rulesets:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;; Substitution rules allow for substituting some new expression for the argument
;; in some new context.
;; It performs the substitution, copying over the equalities from the original eclass.
;; It only places context on the leaf nodes.

(ruleset subst)
(ruleset apply-subst-unions)
(ruleset cleanup-subst)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;; (Subst assumption to in) substitutes `to` for `(Arg ty)` in `in`.
;; It also replaces the leaf context in `to` with `assumption` using `AddContext`.
;; `assumption` *justifies* this substitution, as the context that the result is used in.
;; In other words, it must refine the equivalence relation of `in` with `to` as the argument.
;;                          to   in
(function Subst (Assumption Expr Expr) Expr :unextractable)

;; Used to delay unions for the subst ruleset.
;; This is necessary because substitution may not terminate if it can
;; observe its own results- it may create infinitly large terms.
;; Instead, we phase substitution by delaying resulting unions in this table.
;; After applying this table, substitutions and this table are cleared.
(function DelayedSubstUnion (Expr Expr) Expr :unextractable)
</code></pre></div></div> <p>The apply is multi-phase:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rule ((= lhs (Subst assum to (Arg _ty _oldctx)))
       )
      ;; add the assumption `to`
      ((DelayedSubstUnion lhs (AddContext assum to))))
</code></pre></div></div> <p>after registering the delayed unions:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rule ((DelayedSubstUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-subst-unions)
</code></pre></div></div> <h5 id="drop">Drop</h5> <h5 id="interval-analysis-and-rewrite">Interval Analysis and Rewrite</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset interval-analysis)
(ruleset interval-rewrite)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; if the predicate is true, merge with then branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB true) (lo-bound cond))
      )
      ((union lhs (Subst if_ctx inputs thn)))
      :ruleset interval-rewrite)
</code></pre></div></div> <h5 id="switch-rewrite">Switch Rewrite</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset switch_rewrite)
(ruleset always-switch-rewrite)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>; if a &lt; b then a else b ~~&gt; (min a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a &lt; b then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))
      )
      ((union (Get if_e k) (Bop (Smin) a b)))
      :ruleset switch_rewrite)
</code></pre></div></div> <h5 id="select-optimization">Select Optimization</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset select_opt)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rule
       (
        (= if_e (If pred inputs thn els))
        (ContextOf if_e ctx)

        (= thn_out (Get thn i))
        (= els_out (Get els i))
        (ExprIsPure thn_out)
        (ExprIsPure els_out)
        
        (&gt; 10 (Expr-size thn_out)) ; TODO: Tune these size limits
        (&gt; 10 (Expr-size els_out))
        (= (TCPair t1 c1) (ExtractedExpr thn_out))
        (= (TCPair t2 c2) (ExtractedExpr els_out))
       )
       (
        (union (Get if_e i)
               (Top (Select) pred (TermSubst ctx inputs t1) (TermSubst ctx inputs t2)))
       )
       :ruleset select_opt
)
</code></pre></div></div> <p>This is a intuitive example for using <code class="language-plaintext highlighter-rouge">TermSubst</code> (<a href="#term-substitution">Term Substitution</a>).</p> <h5 id="peepholes">Peepholes</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset peephole)
</code></pre></div></div> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rewrite (Bop (Mul) (Const (Int 0) ty ctx) e) (Const (Int 0) ty ctx) :ruleset peepholes)
</code></pre></div></div> <h5 id="pointee">Pointee</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset memory-helpers)
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(datatype PtrPointees
  (PointsTo List&lt;i64+IntInterval&gt;)
  (PointsAnywhere))

; List&lt;i64+IntInterval&gt; is used as an association list; the i64 keys
; (corresponding to alloc ids) are always unique and sorted, the IntInterval
; values correspond to offset ranges.
; PtrPointees 
;
; (TuplePointsTo [{0-&gt;[4,5], 1-&gt;[0,0]}, {0-&gt;[0,0]}])
; indicates a tuple with two components.
; - The first component might point to Alloc 0 at offsets 4 or 5,
;   or Alloc 1 at offset 0
; - The second component points to Alloc 0 at offset 0
(datatype Pointees
          (TuplePointsTo List&lt;PtrPointees&gt;)
          (PtrPointsTo PtrPointees))
</code></pre></div></div> <p>Here’s a link to the related PR: <a href="https://github.com/egraphs-good/eggcc/pull/434#issue-2228859498">Pointer Analysis</a>, where it says:</p> <ul> <li><code class="language-plaintext highlighter-rouge">PtrPointees</code> represents where a single pointer can point;</li> <li><code class="language-plaintext highlighter-rouge">Pointees</code> represents where an Expr can point to.</li> </ul> <p>As an example: <code class="language-plaintext highlighter-rouge">(TuplePointsTo [(PointsTo {0-&gt;[4,5], 1-&gt;[0,0]}), (PointsAnywhere)])</code> indicates a tuple with two components:</p> <ul> <li>The first component might point to Alloc 0 at offset 4 or 5 or Alloc 1 at offset 0.</li> <li>The second component might point anywhere.</li> </ul> <p>The key function of the pointer analysis is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(function PointsToCells (Expr Pointees) Pointees)
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">(= pointees (PointsToCells e arg-pointees))</code> indicates that when the <code class="language-plaintext highlighter-rouge">(Arg)</code> contained in <code class="language-plaintext highlighter-rouge">e</code> points to <code class="language-plaintext highlighter-rouge">arg-pointees</code>, <code class="language-plaintext highlighter-rouge">e</code> points to <code class="language-plaintext highlighter-rouge">pointees</code>.</p> <blockquote class="block-warning"> <p>don’t understand this…</p> </blockquote> <p>why?</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(rule ((PointsToCells (Bop (Load) e state) ap))
      ((PointsToCells e ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
</code></pre></div></div> <h5 id="invariant-analysis">Invariant Analysis</h5> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>;; bool: whether the term in the Expr is an invariant.
(function is-inv-Expr (Expr Expr) bool :unextractable :merge (or old new))
(function is-inv-ListExpr (Expr ListExpr) bool :unextractable :merge (or old new))
</code></pre></div></div> <h5 id="boundary-analysis">Boundary Analysis</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset boundary-analysis)
</code></pre></div></div> <h5 id="loop-optimization">Loop Optimization</h5> <p>Implemented in ruleset:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(ruleset loop-unroll)
(ruleset loop-peel)
(ruleset loop-iters-analysis)
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Eggcc]]></summary></entry><entry><title type="html">Learn e-graph, egg, and more</title><link href="https://uv-xiao.github.io/blog/2024/egg-things/" rel="alternate" type="text/html" title="Learn e-graph, egg, and more"/><published>2024-11-25T00:00:00+00:00</published><updated>2024-11-25T00:00:00+00:00</updated><id>https://uv-xiao.github.io/blog/2024/egg-things</id><content type="html" xml:base="https://uv-xiao.github.io/blog/2024/egg-things/"><![CDATA[<h1 id="slide">Slide</h1> <iframe src="https://uv-xiao.github.io/assets/slide/egg" width="100%" height="500px" frameborder="0" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="notes"/><summary type="html"><![CDATA[Slide]]></summary></entry><entry><title type="html">Supported Features</title><link href="https://uv-xiao.github.io/blog/2024/features/" rel="alternate" type="text/html" title="Supported Features"/><published>2024-11-18T00:00:00+00:00</published><updated>2024-11-18T00:00:00+00:00</updated><id>https://uv-xiao.github.io/blog/2024/features</id><content type="html" xml:base="https://uv-xiao.github.io/blog/2024/features/"><![CDATA[<h1 id="formatting-and-links">Formatting and Links</h1> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h4 id="hipster-list">Hipster list</h4> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> <h4 id="check-list">Check List</h4> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Brush Teeth</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on socks <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Put on left sock</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on right sock</li> </ul> </li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Go to school</li> </ul> <p>Hoodie Thundercats retro, tote bag 8-bit Godard craft beer gastropub. Truffaut Tumblr taxidermy, raw denim Kickstarter sartorial dreamcatcher. Quinoa chambray slow-carb salvia readymade, bicycle rights 90’s yr typewriter selfies letterpress cardigan vegan.</p> <hr/> <p>Pug heirloom High Life vinyl swag, single-origin coffee four dollar toast taxidermy reprehenderit fap distillery master cleanse locavore. Est anim sapiente leggings Brooklyn ea. Thundercats locavore excepteur veniam eiusmod. Raw denim Truffaut Schlitz, migas sapiente Portland VHS twee Bushwick Marfa typewriter retro id keytar.</p> <blockquote> <p>We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin</p> </blockquote> <p>Fap aliqua qui, scenester pug Echo Park polaroid irony shabby chic ex cardigan church-key Odd Future accusamus. Blog stumptown sartorial squid, gastropub duis aesthetic Truffaut vero. Pinterest tilde twee, odio mumblecore jean shorts lumbersexual.</p> <h1 id="images">Images</h1> <p>This is an example post with image galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <p>Images can be made zoomable. Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The rest of the images in this post are all zoomable, arranged into different mini-galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/11-480.webp 480w,/assets/img/11-800.webp 800w,/assets/img/11-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h1 id="code">Code</h1> <p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h1 id="math">Math</h1> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h1 id="diagrams">Diagrams</h1> <p>This theme supports generating various diagrams from a text description using <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>. Previously, this was done using the <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. For more information on this matter, see the <a href="https://github.com/alshedivat/al-folio/issues/1609#issuecomment-1656995674">related issue</a>. To disable the zooming feature, set <code class="language-plaintext highlighter-rouge">mermaid.zoomable</code> to <code class="language-plaintext highlighter-rouge">false</code> in this post frontmatter.</p> <h2 id="mermaid">Mermaid</h2> <p>The diagram below was generated by the following code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!</span>
<span class="p">```</span>
</code></pre></div></div> <pre><code class="language-mermaid">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
</code></pre> <h1 id="tables">Tables</h1> <p>Using markdown to display tables is easy.</p> <h2 id="simple-example">Simple Example</h2> <p>First, add the following to the post’s front matter</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pretty_table</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>Then, the following syntax</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       |    center 1    |       right 1 |
| Left 2       |    center 2    |       right 2 |
| Left 3       |    center 3    |       right 3 |
</code></pre></div></div> <p>will generate</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="html-example">HTML Example</h2> <p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">"table"</span> <span class="na">data-toggle=</span><span class="s">"table"</span> <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="id">ID</th> <th data-field="name">Item Name</th> <th data-field="price">Item Price</th> </tr> </thead> </table> <p></p> <h2 id="more-complex-example">More Complex Example</h2> <p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-checkbox="true"></th> <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th> <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th> <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th> </tr> </thead> </table> <h1 id="custom-blockquotes">Custom blockquotes</h1> <p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/main/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h1 id="tikz">Tikz</h1> <p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script> <h1 id="pseudocode">Pseudocode</h1> <p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre> <h1 id="jupyter-notebook">Jupyter Notebook</h1> <p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p> <h1 id="tabs">Tabs</h1> <p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="0c7f40fa-e3ff-4f09-a136-b74b146db814" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="0c7f40fa-e3ff-4f09-a136-b74b146db814" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="8c7b6e64-29b4-4cce-b8a8-7c207636b493" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="8c7b6e64-29b4-4cce-b8a8-7c207636b493" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="f8082bfb-3545-4943-9562-5ef958aa5654" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="f8082bfb-3545-4943-9562-5ef958aa5654" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><summary type="html"><![CDATA[this is what features are supported in posts]]></summary></entry><entry><title type="html">zSim + Swarm</title><link href="https://uv-xiao.github.io/blog/2024/zsim/" rel="alternate" type="text/html" title="zSim + Swarm"/><published>2024-11-18T00:00:00+00:00</published><updated>2024-11-18T00:00:00+00:00</updated><id>https://uv-xiao.github.io/blog/2024/zsim</id><content type="html" xml:base="https://uv-xiao.github.io/blog/2024/zsim/"><![CDATA[<h1 id="zsim">zSim</h1> <h2 id="basics">Basics</h2> <blockquote> <p>reference: <a href="https://zsim.csail.mit.edu/tutorial/">micro48-tutorial</a>, <a href="https://dl.acm.org/doi/10.1145/2508148.2485963">zsim-isca-paper</a></p> </blockquote> <h3 id="motivation">Motivation</h3> <blockquote> <p>why not use gem5? why not FPGA?</p> </blockquote> <ul> <li>speed: gem5 ~200(?, to be verified) KIPS v.s. zsim 10s-1000s MIPS</li> <li>ease of use: compared to FPGA emulation</li> </ul> <h3 id="concepts">Concepts</h3> <ul> <li>Cycle/event-driven: simulate all stages cycle by cycle</li> <li> <p>Instruction-driven: simulate all stages at once per ins/uop, accelerated by DBT</p> </li> <li>gem5: full event-driven emulation</li> <li>zsim: DBT-based instruction-driven core + event-driven uncore</li> </ul> <p>Dynamic Binary Translation (DBT) by <a href="https://software.intel.com/sites/landingpage/pintool/docs/98484/Pin/html/index.html">Intel Pin</a> provides <strong>free functional model</strong>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/in_posts/2024-11-18-zsim-overview-480.webp 480w,/assets/img/in_posts/2024-11-18-zsim-overview-800.webp 800w,/assets/img/in_posts/2024-11-18-zsim-overview-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/in_posts/2024-11-18-zsim-overview.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> zsim overview </div> <h4 id="bound-weave-parallelization">Bound-Weave Parallelization</h4> <blockquote class="block-warning"> <p>not dived into this yet.</p> </blockquote> <h4 id="problems">Problems</h4> <ul> <li>ZSim doesn’t simulate wrong path execution <ul> <li>of course it matters, but to what extent?</li> <li>potential solution: https://heirman.net/papers/ispass2023wrongpath.pdf</li> </ul> </li> <li>ZSim does badly for systems or workloads with frequent path-altering interference (e.g., fine-grained message-passing across whole chip) <ul> <li>does it matter for CGRA-like systems?</li> </ul> </li> </ul> <h3 id="organization">Organization</h3> <p><code class="language-plaintext highlighter-rouge">libzsim.so</code> (pintool) + <code class="language-plaintext highlighter-rouge">zsim</code> (harness)</p> <pre><code class="language-mermaid">graph LR
  A[Global Memory] &lt;--&gt; zsim
  zsim --&gt; B[pin -t libzsim.so -- &lt;command0&gt;]
  zsim --&gt; C[pin -t libzsim.so -- &lt;command1&gt;]
  B &lt;--&gt; A
  C &lt;--&gt; A
</code></pre> <p>All simulator objects must be allocated in the global heap. Global heap and <code class="language-plaintext highlighter-rouge">libzsim.so</code> code in same memory locations across all processes — Can use normal pointers &amp; virtual functions.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SimObject</span> <span class="o">:</span> <span class="n">GlobAlloc</span> <span class="p">{...}</span>
<span class="n">g_vector</span><span class="o">&lt;</span><span class="kt">uint64_t</span><span class="o">&gt;</span> <span class="n">cacheLines</span><span class="p">;</span>
</code></pre></div></div> <h3 id="core-model">Core Model</h3> <p>DBT(Pin) with 4 types of analysis routine to cover program simulation:</p> <ul> <li>Basic block (BBL)</li> <li>Load and Store</li> <li>Branch</li> </ul> <pre><code class="language-asm">mov (%rbp),%rcx
Load(%rbp) # Load(Address addr) {L1D-&gt;load(addr);}
add %rax,%rbx
mov %rdx,(%rbp)
Store(%rbp) # Store(Address addr) {L1D-&gt;store(addr, val);}
BasicBlock (BblDescriptor {numInst=4,numBytes=4,uops{type,src,dst,lat,fu-port}})
ja 40530a 
</code></pre> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BasicBlock</span><span class="p">(</span><span class="n">BblDescriptor</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">foreach</span> <span class="n">uop</span> <span class="p">{</span>
    <span class="c1">// undergo all stages as the figure below shows</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/in_posts/2024-11-18-zsim-core-model-480.webp 480w,/assets/img/in_posts/2024-11-18-zsim-core-model-800.webp 800w,/assets/img/in_posts/2024-11-18-zsim-core-model-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/in_posts/2024-11-18-zsim-core-model.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> zsim OOO core model for every instruction </div> <blockquote> <p>Memory model things will be discussed in “Diving into Code”</p> </blockquote> <h3 id="diving-into-code">Diving into Code</h3> <p>I create a <a href="https://github.com/uv-xiao/zswarm">fork</a>, which includes docker setup for zsim. Code lines in this section are relative to the <a href="https://github.com/uv-xiao/zsim/commit/1d15beaaa521358cfc26e7c6109e07f182a28053">commit</a>.</p> <blockquote> <p>Acknowlegdement: I borrow the docker setup from <a href="https://github.com/cmu-roboarch/tartan">tartan</a>. I learned much from <a href="https://wangziqi2013.github.io/article/2020/01/01/zsim-microarch.html">microarch-in-zsim</a>.</p> </blockquote> <p>Two paths: zSim path and application path.</p> <p>Instructions in the simulated binary (application path) is still executed by the native hardware, except that at certain points, control will be transferred to the simulator (zSim path) by <em>routines</em>. The routines are named “analysis routines”, in which the timing model of zSim is implemented.</p> <p>Related files:</p> <ul> <li><code class="language-plaintext highlighter-rouge">zsim_harness.cpp</code> Harness code for zSim, including configuration parsing and Pin run launching.</li> <li><code class="language-plaintext highlighter-rouge">zsim.cpp</code> Instrumentation routines for basic blocks, loads and stores, and branch instructions.</li> <li><code class="language-plaintext highlighter-rouge">decoder.h</code> Pre-decoding and Decoding stage simulation; Instruction to uop translation; DynBbl, execution port definition; Register dependency definition.</li> <li><code class="language-plaintext highlighter-rouge">core.h</code> Core interface for analysis routines; Core interface for simulation.</li> <li><code class="language-plaintext highlighter-rouge">ooo_core.h</code> Out-of-Order core microarchitecture simulation, incluuding instruction fetch, instruction window, reorder buffer, loads and stores, and register file simulation.</li> </ul> <p>For each process from the configuration, such as <code class="language-plaintext highlighter-rouge">process0</code> and <code class="language-plaintext highlighter-rouge">process1</code> in <code class="language-plaintext highlighter-rouge">simple.cfg</code>, the harness (<code class="language-plaintext highlighter-rouge">zsim_harness.cpp</code>) starts a Pin run for simulation (zsim_harness.cpp:233 <code class="language-plaintext highlighter-rouge">LaunchProcess(uint32_t procIdx)</code>). A Pin run looks like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/zswarm/pin-2.14-71313-gcc.4.4.7-linux/intel64/bin/pinbin <span class="nt">-follow_execv</span> <span class="nt">-tool_exit_timeout</span> 1 <span class="nt">-ifeellucky</span> <span class="nt">-t</span> /zswarm/zsim/build/opt/libzsim.so <span class="nt">-config</span> /zswarm/zsim/tests/simple.cfg <span class="nt">-outputDir</span> /zswarm/zsim/zrun <span class="nt">-shmid</span> 22 <span class="nt">-traceToFile</span> <span class="nt">-procIdx</span> 1 <span class="nt">--</span> <span class="nb">cat</span> /zswarm/zsim/tests/simple.cfg
</code></pre></div></div> <blockquote class="block-warning"> <p>Debugging features (in <code class="language-plaintext highlighter-rouge">zsim.cpp</code>, zsim.cpp:1490), FFI and Virt (in <code class="language-plaintext highlighter-rouge">zsim.cpp</code>, zsim.cpp:1533, zsim.cpp:1535) need more diving into code.</p> </blockquote> <p>Instrumentation routines of zSim are defined in <code class="language-plaintext highlighter-rouge">zsim.cpp</code>. <code class="language-plaintext highlighter-rouge">GlobSimInfo</code> holds system configuration values, all read-only, set at initialization. zSim registers a call back <code class="language-plaintext highlighter-rouge">Trace()</code> to PIN using library call <code class="language-plaintext highlighter-rouge">TRACE_AddInstrumentFunction()</code>, at zsim.cpp:1538:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TRACE_AddInstrumentFunction</span><span class="p">(</span><span class="n">Trace</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Trace(TRACE trace, VOID *v)</code> (at zsim.cpp:603) is called every time PIN sees an uninstrumented trace during execution. It specifies how the trace should be instrumented in zSim. Specifically, it iterates through the basic blocks in the trace, decodes each BBL (zsim.cpp:607, decoder.cpp:1300), and inserts a call to <code class="language-plaintext highlighter-rouge">IndirectBasicBlock</code> (zsim.cpp:181, core.h:46, ooo_core.cpp:505) by <code class="language-plaintext highlighter-rouge">BBL_InsertCall()</code>.</p> <blockquote> <p><a href="https://software.intel.com/sites/landingpage/pintool/docs/98484/Pin/html/index.html">Pin Docs</a> says, Pin’s instrumentation is “just in time” (JIT). Instrumentation occurs immediately before a code sequence is executed for the first time. We call this mode of operation <strong>trace instrumentation</strong>… Pin breaks the trace into basic blocks, BBLs. A BBL is a single entrance, single exit sequence of instructions… Trace instrumentation utilizes the TRACE_AddInstrumentFunction API call.</p> </blockquote> <blockquote> <p>Note that basic blocks and traces are recognized by the Pin framework dynamically, meaning that a dynamic basic block (or trace) in Pin may be broken into two smaller basic blocks (traces) if a branch instruction jumps to the middle of the block (trace) in the run time. In this case, each new basic block (trace) will be re-instrumented by calling the instrumentation routine registered to Pin, and the old instrumentation will be discarded.</p> </blockquote> <p>In <code class="language-plaintext highlighter-rouge">Trace(TRACE trace, VOID *v)</code>, zSim also iterates through instructions in the trace, and run <code class="language-plaintext highlighter-rouge">Instruction(ins)</code> (zsim.cpp:616) for instruction instrumentation. <code class="language-plaintext highlighter-rouge">Instruction</code> (zsim.cpp:535) prints the instruction by <code class="language-plaintext highlighter-rouge">PrintIp</code>, and for load/store/condbr instructions, it inserts callbacks including <code class="language-plaintext highlighter-rouge">IndirectLoadSingle</code>, <code class="language-plaintext highlighter-rouge">IndirectStoreSingle</code>, <code class="language-plaintext highlighter-rouge">IndirectPredLoadSingle</code>, <code class="language-plaintext highlighter-rouge">IndirectPredStoreSingle</code>, and <code class="language-plaintext highlighter-rouge">IndirectRecordBranch</code>. Note that if an instruction accesses multiple memory locations, or both loads from and stores into memory, multiple instrumentations will be injected for the same instruction. Load/store callbacks do nothing more than simply logging the address, which serves as the basis of memory system simulation. Condbr callbacks log the target address and branch outcome (taken or not taken) for branch prediction simulation. The callbacks trigger functions stored in <code class="language-plaintext highlighter-rouge">InstrFuncPtrs fPtrs[MAX_THREADS]</code> (at zsim.cpp:170).</p> <p>Unsupported instructions (often implemented by prefixing a special no-op as “magic op”) are also injected in <code class="language-plaintext highlighter-rouge">Instruction()</code> at zsim.cpp:528. It inserts callbacks to <code class="language-plaintext highlighter-rouge">HandleMagicOp</code>(zsim.cpp:1142). In general, <strong>such instruction instrumentation enables more flexible customization</strong>.</p> <blockquote class="block-tip"> <p>Later in the Tartan case study, we will see how magic op is used to implement new instructions.</p> </blockquote> <h4 id="core-interface">Core Interface</h4> <p><code class="language-plaintext highlighter-rouge">core.h</code> defines the core interface for analysis routines.</p> <p><code class="language-plaintext highlighter-rouge">struct BblInfo</code> stores BBL information including size, #ins, uops, and <strong>decoder cycles</strong>. The last two is used for OOO core model only. In <code class="language-plaintext highlighter-rouge">BblInfo* Decoder::decodeBbl(BBL bbl, bool oooDecoding)</code> from <code class="language-plaintext highlighter-rouge">decoder.cpp</code>, Macro-op fusion is tried (decoder.cpp:1332). It models two steps of OOO decoder: pre-decode and decode. The docoding cycles are stored in <code class="language-plaintext highlighter-rouge">bblInfo-&gt;oooBbl[0].uop[i].decCycle</code>. The concrete instruction decoding is done in <code class="language-plaintext highlighter-rouge">Decoder::decodeInstr</code> (decoder.cpp:541), where <code class="language-plaintext highlighter-rouge">emitXXX()</code>s like <code class="language-plaintext highlighter-rouge">emitBasicOp()</code>, are called to emit uops. Every <code class="language-plaintext highlighter-rouge">instr</code> can have 0-2 src regs and 0-2 dst regs, stored in <code class="language-plaintext highlighter-rouge">uop.rs[0/1]</code> and <code class="language-plaintext highlighter-rouge">uop.rd[0/1]</code>. The decoder is shared by all core models.</p> <p><code class="language-plaintext highlighter-rouge">struct InstrFuncPtrs</code> stores analysis routine function pointers. During initialization, each core type creates an instance of <code class="language-plaintext highlighter-rouge">struct InstrFuncPtrs</code>, and populates this structure with its own static member functions. zSim stores the current instance being used in a global structure, <code class="language-plaintext highlighter-rouge">InstrFuncPtrs fPtrs[MAX_THREADS]</code> (at zsim.cpp:170). Here is a field list of <code class="language-plaintext highlighter-rouge">struct InstrFuncPtrs</code>:</p> <table class="mbtablestyle"> <thead> <tr> <th style="text-align: center">Field Name</th> <th>Description</th> <th>Core Method Called (<code class="language-plaintext highlighter-rouge">OOOCore</code>)</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">loadPtr</td> <td>Called before instructions that read from memory for each operand</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::LoadFunc()</code></td> </tr> <tr> <td style="text-align: center">storePtr</td> <td>Called before instructions that write into memory for each operand</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::StoreFunc()</code></td> </tr> <tr> <td style="text-align: center">bblPtr</td> <td>Called before a basic block is about to be executed</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::BblFunc()</code></td> </tr> <tr> <td style="text-align: center">branchPtr</td> <td>Called before control flow instructions, including conditional and unconditional branches</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::BranchFunc()</code></td> </tr> <tr> <td style="text-align: center">predLoadPtr</td> <td>Called before predicated load instructions for each operand</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::PredLoadFunc()</code></td> </tr> <tr> <td style="text-align: center">predStorePtr</td> <td>Called before predicated store instructions for each operand</td> <td><code class="language-plaintext highlighter-rouge">OOOCore::PredStoreFunc()</code></td> </tr> </tbody> </table> <h4 id="ooo-core-model">OOO Core Model</h4> <p>We first describe the behavior of analysis routines in <code class="language-plaintext highlighter-rouge">OOOCore</code>. <code class="language-plaintext highlighter-rouge">OOOCore::LoadFunc()</code> and <code class="language-plaintext highlighter-rouge">OOOCore::StoreFunc()</code> call <code class="language-plaintext highlighter-rouge">OOOCore::load()</code> and <code class="language-plaintext highlighter-rouge">OOOCore::store()</code> respectively, which log the memory access address into an array, <code class="language-plaintext highlighter-rouge">loadAddrs</code> and <code class="language-plaintext highlighter-rouge">storeAddrs</code>. These addresses will be used for cache system simulation after the current basic block has finished execution. Similarly, <code class="language-plaintext highlighter-rouge">OOOCore::PredLoadFunc()</code> and <code class="language-plaintext highlighter-rouge">OOOCore::PredStoreFunc()</code> log the addresses of predicated memory accesses if the condition evaluates to true, or -1 if false. <code class="language-plaintext highlighter-rouge">OOOCore::BranchFunc()</code> log the branch outcome, the taken and not taken address, and the address of the branch instruction itself by setting fields <code class="language-plaintext highlighter-rouge">branchTaken</code>, <code class="language-plaintext highlighter-rouge">branchTakenNpc</code>, <code class="language-plaintext highlighter-rouge">branchNotTakenNpc</code> and <code class="language-plaintext highlighter-rouge">branchPc</code>. Only one entry for branch logging is required, since according to the definition, branches will only occur as the last instruction of a basic block.</p> <p><code class="language-plaintext highlighter-rouge">class OOOCore</code> is defined in <code class="language-plaintext highlighter-rouge">ooo_core.h</code> (at ooo_core.h:361).</p> <h4 id="ooo-simulation-details">OOO Simulation Details</h4> <blockquote> <p>One extremely useful resource of microarchitectural documents is <a href="https://www.agner.org/optimize/">Agner’s Blog</a>, in which the structure of the pipeline and micro-op (uop) maps are described in detail. zSim also uses materials in this blog as a reference. Especially, it includes the <a href="microarchitecture">microarchitecture manual</a> and the <a href="https://www.agner.org/optimize/instruction_tables.pdf">instruction table</a> (also a <a href="https://www.agner.org/optimize/instruction_tables.ods">ods spreadsheet</a>).</p> </blockquote> <blockquote class="block-warning"> <p>todo</p> </blockquote> <h2 id="case-study-tartan">Case study: Tartan</h2> <blockquote class="block-warning"> <p>todo</p> </blockquote> <h1 id="swarm">Swarm</h1> <blockquote class="block-warning"> <p>todo</p> </blockquote>]]></content><author><name></name></author><category term="notes"/><summary type="html"><![CDATA[note down some tries, thoughts, and questions about zSim and Swarm]]></summary></entry></feed>